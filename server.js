const express = require('express');
const app = express();
const mysql = require('mysql2/promise');
const cors = require('cors');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const path = require('path');

const hostname = '0.0.0.0';
const port = process.env.PORT || 4000;

app.use(cors({
    origin: '*', // ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ domain ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    credentials: true
}));
app.use(bodyParser.json());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

const JWT_SECRET = 'stroke_rehab_secret_key_2024';

const createConnection = async () => {
  const connection = await mysql.createConnection({
    host: 'gateway01.ap-northeast-1.prod.aws.tidbcloud.com',
    user: '3HZNLzyS4E2dJfG.root',
    password: '1CmpzXSMTQxYdngG',
    database: 'stroke_rehab_db',
    ssl: { minVersion: 'TLSv1.2' },
    timezone: '+07:00'
  });
  
  await connection.execute("SET time_zone = '+07:00'");
  await connection.execute("SET SESSION time_zone = '+07:00'");
  
  return connection;
};

// Middleware JWT
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ 
      success: false, 
      message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Access token' 
    });
  }
  
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      console.error('‚ùå Token verification failed:', err.message);
      return res.status(403).json({ 
        success: false, 
        message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_id ‡πÄ‡∏õ‡πá‡∏ô number
    if (user.user_id) {
      user.user_id = parseInt(user.user_id);
    }
    
    console.log('‚úÖ Token verified:', { 
      user_id: user.user_id, 
      role: user.role 
    });
    
    req.user = user;
    next();
  });
};

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö DB
(async () => {
  try {
    const connection = await createConnection();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    await connection.end();
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
  }
})();

// Route ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
app.get('/', (req, res) => {
  res.json({ message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!', timestamp: new Date().toISOString(), version: '1.0.0' });
});
app.get('/health', (req, res) => {
  res.json({ status: 'OK', server: '‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á‡πÅ‡∏ï‡∏Å', port });
});

// ========================
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (Authentication)
// ========================

// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
app.post('/api/auth/login', async (req, res) => {
  let connection;
  
  try {
    const { phone, password } = req.body;
    
    console.log('üîç Login attempt:', { phone, hasPassword: !!password });
    
    if (!phone || !password) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
      });
    }

    if (!/^[0-9]{10}$/.test(phone)) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å)'
      });
    }

    connection = await createConnection();
    
    const [users] = await connection.execute(
      'SELECT user_id, phone, password_hash, full_name, role FROM Users WHERE phone = ?',
      [phone]
    );

    if (users.length === 0) {
      await connection.end();
      return res.status(401).json({
        success: false,
        message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    const user = users[0];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    let isValidPassword = false;
    try {
      isValidPassword = await bcrypt.compare(password, user.password_hash);
    } catch (bcryptError) {
      console.error('‚ùå Bcrypt error:', bcryptError);
      await connection.end();
      return res.status(500).json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
      });
    }
    
    if (!isValidPassword) {
      try {
        await connection.execute(
          'INSERT INTO Login_History (user_id, ip_address, status) VALUES (?, ?, ?)',
          [user.user_id, req.ip || '0.0.0.0', 'Failed']
        );
      } catch (e) {}
      
      await connection.end();
      return res.status(401).json({
        success: false,
        message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏û‡∏£‡πâ‡∏≠‡∏° parseInt
    const token = jwt.sign(
      { 
        user_id: parseInt(user.user_id), // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ parseInt
        phone: user.phone, 
        role: user.role // ‚úÖ ‡πÉ‡∏ä‡πâ role ‡∏à‡∏≤‡∏Å database ‡∏ï‡∏£‡∏á‡πÜ
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å login success
    try {
      await connection.execute(
        'INSERT INTO Login_History (user_id, ip_address, status) VALUES (?, ?, ?)',
        [user.user_id, req.ip || '0.0.0.0', 'Success']
      );
    } catch (e) {}

    console.log('‚úÖ Login successful:', { 
      phone: user.phone, 
      role: user.role,
      user_id: user.user_id 
    });

    res.json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      user: {
        user_id: parseInt(user.user_id), // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô number
        phone: user.phone,
        full_name: user.full_name,
        role: user.role // ‚úÖ ‡∏™‡πà‡∏á role ‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å DB
      },
      token: token
    });

  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
      debug: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  } finally {
    if (connection) {
      try {
        await connection.end();
      } catch (e) {}
    }
  }
});
// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà API POST /api/auth/register ‡πÉ‡∏ô server.js ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ
app.post('/api/auth/register', async (req, res) => {
  const connection = await createConnection();
  
  try {
    console.log('üîç Registration request received');
    console.log('Request body:', JSON.stringify(req.body, null, 2));
    
    const {
      phone,
      password,
      first_name,
      last_name,
      birth_date,
      gender,
      role,
      // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
      weight,
      height,
      injured_side,
      injured_part,
      emergency_contact_name,
      emergency_contact_phone,
      emergency_contact_relation,
      // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î
      license_number,
      specialization,
      // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
      relationship
    } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!phone || !password || !first_name || !last_name || !birth_date || !gender || !role) {
      console.log('‚ùå Missing required fields');
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    const phoneRegex = /^[0-9]{10}$/;
    if (!phoneRegex.test(phone)) {
      console.log('‚ùå Invalid phone format:', phone);
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å)'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î
    const birthDateObj = new Date(birth_date);
    if (isNaN(birthDateObj.getTime())) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingUsers] = await connection.execute(
      'SELECT user_id FROM Users WHERE phone = ?',
      [phone]
    );

    if (existingUsers.length > 0) {
      console.log('‚ùå Phone number already exists:', phone);
      return res.status(400).json({
        success: false,
        message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction
    await connection.beginTransaction();
    console.log('üîÑ Transaction started');

    try {
      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const password_hash = await bcrypt.hash(password, 12);
      const full_name = `${first_name} ${last_name}`;

      console.log('üîê Password hashed successfully');

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ôÔøΩ‡∏≤‡∏£‡∏≤‡∏á Users
      const [userResult] = await connection.execute(
        'INSERT INTO Users (phone, password_hash, full_name, role, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW())',
        [phone, password_hash, full_name, role]
      );

      const user_id = userResult.insertId;
      console.log(`‚úÖ User created with ID: ${user_id}`);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
      if (role === 'Patient' || role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
        console.log('üë§ Creating patient record...');
        
        const patientData = {
          user_id,
          first_name: first_name.substring(0, 50),
          last_name: last_name.substring(0, 50),
          birth_date,
          gender: gender.substring(0, 10),
          weight: weight ? parseFloat(weight) : null,
          height: height ? parseFloat(height) : null, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô parseFloat
          patient_phone: phone,
          injured_side: injured_side || 'Left', // ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NOT NULL
          injured_part: injured_part || 'Other', // ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NOT NULL
          emergency_contact_name: emergency_contact_name || null,
          emergency_contact_phone: emergency_contact_phone || null,
          emergency_contact_relation: emergency_contact_relation || null
        };

        console.log('Patient data to insert:', patientData);

        await connection.execute(
          `INSERT INTO Patients (
            user_id, first_name, last_name, birth_date, gender, weight, height, 
            patient_phone, injured_side, injured_part, emergency_contact_name, 
            emergency_contact_phone, emergency_contact_relation
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            patientData.user_id,
            patientData.first_name,
            patientData.last_name,
            patientData.birth_date,
            patientData.gender,
            patientData.weight,
            patientData.height,
            patientData.patient_phone,
            patientData.injured_side,
            patientData.injured_part,
            patientData.emergency_contact_name,
            patientData.emergency_contact_phone,
            patientData.emergency_contact_relation
          ]
        );

        console.log('‚úÖ Patient record created successfully');

      } else if (role === 'Physiotherapist' || role === '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î') {
        console.log('ü©∫ Creating physiotherapist record...');
        
        await connection.execute(
          'INSERT INTO Physiotherapists (user_id, license_number, specialization) VALUES (?, ?, ?)',
          [user_id, license_number || null, specialization || null]
        );

        console.log('‚úÖ Physiotherapist record created successfully');

      } else if (role === 'Caregiver' || role === '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•') {
        console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Creating caregiver record...');
        
        await connection.execute(
          'INSERT INTO Caregivers (user_id, relationship) VALUES (?, ?)',
          [user_id, relationship || null]
        );

        console.log('‚úÖ Caregiver record created successfully');
      }

      // Commit transaction
      await connection.commit();
      console.log('‚úÖ Transaction committed successfully');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
      const token = jwt.sign(
  { 
    user_id: parseInt(user_id), // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ parseInt
    phone: phone, 
    role: role 
  },
  JWT_SECRET,
  { expiresIn: '24h' }
);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      try {
        await connection.execute(
          'INSERT INTO Login_History (user_id, ip_address, status, created_at) VALUES (?, ?, ?, NOW())',
          [user_id, req.ip || '0.0.0.0', 'Registration']
        );
      } catch (historyError) {
        console.warn('‚ö†Ô∏è Failed to log registration history:', historyError.message);
      }

      console.log('üéâ Registration completed successfully for:', phone);

      res.status(201).json({
        success: true,
        message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        user: {
          user_id: user_id,
          phone: phone,
          full_name: full_name,
          role: role
        },
        token: token
      });

    } catch (transactionError) {
      // Rollback transaction
      await connection.rollback();
      console.error('‚ùå Transaction rolled back due to error:', transactionError);
      throw transactionError;
    }

  } catch (error) {
    console.error('‚ùå Registration error:', error);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô';
    
    if (error.code === 'ER_DUP_ENTRY') {
      errorMessage = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
    } else if (error.code === 'ER_NO_REFERENCED_ROW_2') {
      errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    } else if (error.code === 'ER_BAD_NULL_ERROR') {
      errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô';
    } else if (error.code === 'ER_DATA_TOO_LONG') {
      errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    } else if (error.message.includes('Data truncated')) {
      errorMessage = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }
    
    res.status(500).json({
      success: false,
      message: errorMessage,
      error_code: error.code,
      debug: process.env.NODE_ENV === 'development' ? error.message : undefined
    });

  } finally {
    await connection.end();
    console.log('üîå Database connection closed');
  }
});

// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
app.post('/api/auth/logout', authenticateToken, (req, res) => {
  res.json({
    success: true,
    message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
  });
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á const createConnection)
function normalizeEnumValue(value, type) {
  if (!value) return null;
  
  const mappings = {
    role: {
      '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢': 'Patient',
      'Patient': 'Patient',
      '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î': 'Physiotherapist',
      'Physiotherapist': 'Physiotherapist',
      '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•': 'Caregiver',
      'Caregiver': 'Caregiver',
      'Admin': 'Admin'
    },
    gender: {
      '‡∏ä‡∏≤‡∏¢': 'Male',
      'Male': 'Male',
      '‡∏´‡∏ç‡∏¥‡∏á': 'Female',
      'Female': 'Female',
      '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': 'Other',
      'Other': 'Other'
    },
    injured_side: {
      '‡∏ã‡πâ‡∏≤‡∏¢': 'Left',
      'Left': 'Left',
      '‡∏Ç‡∏ß‡∏≤': 'Right',
      'Right': 'Right',
      '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á': 'Both',
      'Both': 'Both'
    },
    injured_part: {
      '‡πÅ‡∏Ç‡∏ô': 'Arm',
      'Arm': 'Arm',
      '‡∏Ç‡∏≤': 'Leg',
      'Leg': 'Leg',
      '‡∏•‡∏≥‡∏ï‡∏±‡∏ß': 'Trunk',
      'Trunk': 'Trunk',
      '‡∏´‡∏±‡∏ß': 'Head',
      'Head': 'Head',
      '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': 'Other',
      'Other': 'Other'
    }
  };
  
  return mappings[type]?.[value] || value;
}

// ========================
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Management CRUD)
// ========================

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)
app.get('/api/users', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }

  const connection = await createConnection();
  
  try {
    const [users] = await connection.execute(`
      SELECT user_id, phone, full_name, role, created_at, updated_at 
      FROM Users 
      ORDER BY created_at DESC
    `);

    res.json({
      success: true,
      data: users
    });
  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.get('/api/users/:id', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  const userId = parseInt(req.params.id);
  
  try {
    const tokenUserId = parseInt(req.user.user_id);
    const requestedUserId = parseInt(userId);
    
    if (tokenUserId !== requestedUserId && !isAdmin(req.user.role)) {
      console.log('‚ùå Authorization failed');
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const [users] = await connection.execute(
      'SELECT user_id, phone, full_name, role, created_at FROM Users WHERE user_id = ?',
      [userId]
    );

    if (users.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const user = users[0];
    let profileData = { ...user };

    if (user.role === 'Patient' || user.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
      const [patients] = await connection.execute(
        'SELECT * FROM Patients WHERE user_id = ?',
        [userId]
      );
      profileData.patient_info = patients[0] || null;
    } else if (user.role === 'Physiotherapist' || user.role === '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î') {
      const [physios] = await connection.execute(
        'SELECT * FROM Physiotherapists WHERE user_id = ?',
        [userId]
      );
      profileData.physiotherapist_info = physios[0] || null;
    } else if (user.role === 'Caregiver' || user.role === '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•') {
      const [caregivers] = await connection.execute(
        'SELECT * FROM Caregivers WHERE user_id = ?',
        [userId]
      );
      profileData.caregiver_info = caregivers[0] || null;
    }

    console.log('‚úÖ Profile loaded successfully for user:', userId);

    res.json({
      success: true,
      data: profileData
    });

  } catch (error) {
    console.error('Error loading profile:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'
    });
  } finally {
    await connection.end();
  }
});

app.put('/api/users/:id', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  const userId = parseInt(req.params.id);
  
  try {
    const tokenUserId = parseInt(req.user.user_id);
    const requestedUserId = parseInt(userId);
    
    if (tokenUserId !== requestedUserId && !isAdmin(req.user.role)) {
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const {
      full_name, first_name, last_name, birth_date, gender, weight, height,
      injured_side, injured_part, emergency_contact_name,
      emergency_contact_phone, emergency_contact_relation,
      license_number, specialization, relationship
    } = req.body;

    await connection.beginTransaction();

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á Users (‡∏°‡∏µ updated_at ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    if (full_name || (first_name && last_name)) {
      const nameToUpdate = full_name || `${first_name} ${last_name}`;
      await connection.execute(
        'UPDATE Users SET full_name = ?, updated_at = NOW() WHERE user_id = ?',
        [nameToUpdate, userId]
      );
      console.log('‚úÖ Updated Users table');
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    const [users] = await connection.execute(
      'SELECT role FROM Users WHERE user_id = ?',
      [userId]
    );

    if (users.length === 0) {
      await connection.rollback();
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const userRole = users[0].role;

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    if (userRole === 'Patient' || userRole === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡πÉ‡∏ô Patients ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [existingPatients] = await connection.execute(
        'SELECT patient_id FROM Patients WHERE user_id = ?',
        [userId]
      );

      if (existingPatients.length === 0) {
        await connection.rollback();
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'
        });
      }

      const updates = [];
      const values = [];

      if (first_name !== undefined && first_name.trim() !== '') { 
        updates.push('first_name = ?'); 
        values.push(first_name.substring(0, 50)); 
      }
      
      if (last_name !== undefined && last_name.trim() !== '') { 
        updates.push('last_name = ?'); 
        values.push(last_name.substring(0, 50)); 
      }
      
      if (birth_date !== undefined && birth_date.trim() !== '') { 
        updates.push('birth_date = ?'); 
        values.push(birth_date); 
      }
      
      if (gender !== undefined && gender.trim() !== '') { 
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
        const validGenders = ['‡∏ä‡∏≤‡∏¢', '‡∏´‡∏ç‡∏¥‡∏á', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', 'Male', 'Female', 'Other'];
        if (validGenders.includes(gender)) {
          updates.push('gender = ?'); 
          values.push(gender); 
        } else {
          await connection.rollback();
          return res.status(400).json({
            success: false,
            message: `‡πÄ‡∏û‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${gender}. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: ‡∏ä‡∏≤‡∏¢, ‡∏´‡∏ç‡∏¥‡∏á, ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ`
          });
        }
      }
      
      if (weight !== undefined) { 
        if (weight === '' || weight === null || weight === 0) {
          updates.push('weight = ?');
          values.push(null);
        } else {
          const weightNum = parseFloat(weight);
          if (!isNaN(weightNum) && weightNum > 0) {
            updates.push('weight = ?'); 
            values.push(Math.min(999.99, Math.max(0.01, weightNum))); 
          }
        }
      }
      
      if (height !== undefined) { 
        if (height === '' || height === null || height === 0) {
          updates.push('height = ?');
          values.push(null);
        } else {
          const heightNum = parseFloat(height);
          if (!isNaN(heightNum) && heightNum > 0) {
            updates.push('height = ?'); 
            values.push(Math.min(999.99, Math.max(0.01, heightNum))); 
          }
        }
      }
      
      if (injured_side !== undefined && injured_side.trim() !== '') {
        // injured_side ‡πÄ‡∏õ‡πá‡∏ô NOT NULL ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        const validSides = ['‡∏ã‡πâ‡∏≤‡∏¢', '‡∏Ç‡∏ß‡∏≤', '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á', 'Left', 'Right', 'Both'];
        if (validSides.includes(injured_side)) {
          updates.push('injured_side = ?'); 
          values.push(injured_side); 
        } else {
          await connection.rollback();
          return res.status(400).json({
            success: false,
            message: `‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${injured_side}. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á`
          });
        }
      }
      
      if (injured_part !== undefined && injured_part.trim() !== '') {
        // injured_part ‡πÄ‡∏õ‡πá‡∏ô NOT NULL ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        const validParts = ['‡πÅ‡∏Ç‡∏ô', '‡∏Ç‡∏≤', '‡∏•‡∏≥‡∏ï‡∏±‡∏ß', '‡∏´‡∏±‡∏ß', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', 'Arm', 'Leg', 'Trunk', 'Head', 'Other'];
        if (validParts.includes(injured_part)) {
          updates.push('injured_part = ?'); 
          values.push(injured_part); 
        } else {
          await connection.rollback();
          return res.status(400).json({
            success: false,
            message: `‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${injured_part}. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: ‡πÅ‡∏Ç‡∏ô, ‡∏Ç‡∏≤, ‡∏•‡∏≥‡∏ï‡∏±‡∏ß, ‡∏´‡∏±‡∏ß, ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ`
          });
        }
      }
      
      if (emergency_contact_name !== undefined) { 
        updates.push('emergency_contact_name = ?'); 
        values.push(emergency_contact_name && emergency_contact_name.trim() !== '' ? emergency_contact_name.substring(0, 100) : null); 
      }
      
      if (emergency_contact_phone !== undefined) { 
        if (emergency_contact_phone && emergency_contact_phone.trim() !== '') {
          const cleanPhone = emergency_contact_phone.replace(/\D/g, '');
          if (/^\d{10}$/.test(cleanPhone)) {
            updates.push('emergency_contact_phone = ?'); 
            values.push(cleanPhone); 
          } else {
            await connection.rollback();
            return res.status(400).json({
              success: false,
              message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å)'
            });
          }
        } else {
          updates.push('emergency_contact_phone = ?'); 
          values.push(null); 
        }
      }
      
      if (emergency_contact_relation !== undefined) { 
        updates.push('emergency_contact_relation = ?'); 
        values.push(emergency_contact_relation && emergency_contact_relation.trim() !== '' ? emergency_contact_relation.substring(0, 50) : null); 
      }

      if (updates.length > 0) {
        values.push(userId);
        const updateQuery = `UPDATE Patients SET ${updates.join(', ')} WHERE user_id = ?`;
        
        console.log('Update query:', updateQuery);
        console.log('Update values:', values);
        
        await connection.execute(updateQuery, values);
        console.log('‚úÖ Updated Patients table');
      }
      
    } else if (userRole === 'Physiotherapist' || userRole === '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡πÉ‡∏ô Physiotherapists ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [existingPhysios] = await connection.execute(
        'SELECT physio_id FROM Physiotherapists WHERE user_id = ?',
        [userId]
      );

      if (existingPhysios.length === 0) {
        await connection.rollback();
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î'
        });
      }

      const updates = [];
      const values = [];

      if (license_number !== undefined) { 
        updates.push('license_number = ?'); 
        values.push(license_number && license_number.trim() !== '' ? license_number.substring(0, 50) : null); 
      }
      
      if (specialization !== undefined) { 
        updates.push('specialization = ?'); 
        values.push(specialization && specialization.trim() !== '' ? specialization.substring(0, 100) : null); 
      }

      if (updates.length > 0) {
        values.push(userId);
        
        await connection.execute(
          `UPDATE Physiotherapists SET ${updates.join(', ')} WHERE user_id = ?`,
          values
        );
        console.log('‚úÖ Updated Physiotherapists table');
      }
      
    } else if (userRole === 'Caregiver' || userRole === '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡πÉ‡∏ô Caregivers ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [existingCaregivers] = await connection.execute(
        'SELECT caregiver_id FROM Caregivers WHERE user_id = ?',
        [userId]
      );

      if (existingCaregivers.length === 0) {
        await connection.rollback();
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•'
        });
      }

      if (relationship !== undefined) {
        await connection.execute(
          'UPDATE Caregivers SET relationship = ? WHERE user_id = ?',
          [relationship && relationship.trim() !== '' ? relationship.substring(0, 50) : null, userId]
        );
        console.log('‚úÖ Updated Caregivers table');
      }
    }

    await connection.commit();
    console.log('‚úÖ Profile update completed successfully');

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    await connection.rollback();
    console.error('‚ùå Profile update error:', error);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    
    if (error.code === 'ER_BAD_NULL_ERROR') {
      errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (injured_side ‡πÅ‡∏•‡∏∞ injured_part ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)';
    } else if (error.code === 'ER_DATA_TOO_LONG') {
      errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    } else if (error.message.includes('Data truncated')) {
      errorMessage = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ENUM values)';
    } else if (error.code === 'ER_BAD_FIELD_ERROR') {
      errorMessage = `‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error.message}`;
    } else if (error.code === 'ER_TRUNCATED_WRONG_VALUE' || error.code === 'ER_WRONG_VALUE') {
      errorMessage = '‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ENUM values)';
    }
    
    res.status(500).json({
      success: false,
      message: `${errorMessage}: ${error.message}`,
      error_code: error.code,
      debug: process.env.NODE_ENV === 'development' ? error.sqlMessage : undefined
    });
  } finally {
    await connection.end();
  }
});

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)
app.delete('/api/users/:id', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }

  const connection = await createConnection();
  const userId = req.params.id;
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [users] = await connection.execute(
      'SELECT user_id FROM Users WHERE user_id = ?',
      [userId]
    );

    if (users.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (CASCADE ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢)
    await connection.execute(
      'DELETE FROM Users WHERE user_id = ?',
      [userId]
    );

    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
    });
  } finally {
    await connection.end();
  }
});

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
app.post('/api/users/:id/change-password', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  const userId = parseInt(req.params.id);
  
  try {
    const tokenUserId = Number(req.user.user_id);
    const requestedUserId = Number(userId);
    
    if (tokenUserId !== requestedUserId && !isAdmin(req.user.role)) {
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const { currentPassword, newPassword } = req.body;

    if (!newPassword || newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
      });
    }

    // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    if (!isAdmin(req.user.role)) {
      if (!currentPassword) {
        return res.status(400).json({
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const [users] = await connection.execute(
        'SELECT password_hash FROM Users WHERE user_id = ?',
        [userId]
      );

      if (users.length === 0) {
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        });
      }

      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, users[0].password_hash);
      if (!isCurrentPasswordValid) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    const newPasswordHash = await bcrypt.hash(newPassword, 12);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    await connection.execute(
      'UPDATE Users SET password_hash = ?, updated_at = NOW() WHERE user_id = ?',
      [newPasswordHash, userId]
    );

    res.json({
      success: true,
      message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
    });
  } finally {
    await connection.end();
  }
});

// ========================
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (Patient CRUD)
// ========================

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/patients', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  
  try {
    let query = `
      SELECT p.*, u.phone, u.full_name, u.created_at
      FROM Patients p 
      JOIN Users u ON p.user_id = u.user_id 
    `;
    let queryParams = [];

    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (req.user.role === 'Patient' || req.user.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
      query += ' WHERE u.user_id = ?';
      queryParams = [req.user.user_id];
    }

    query += ' ORDER BY p.patient_id DESC';

    const [patients] = await connection.execute(query, queryParams);

    res.json({
      success: true,
      data: patients
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
app.get('/api/patients/:id', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  const patientId = req.params.id;
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.role === 'Patient' || req.user.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
      const [patients] = await connection.execute(
        'SELECT patient_id FROM Patients WHERE user_id = ? AND patient_id = ?',
        [req.user.user_id, patientId]
      );
      
      if (patients.length === 0) {
        return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
      }
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏° (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Exercise_Sessions)
    const summary = {
      total_plans: 0,
      total_exercises: 0,
      total_sessions: 0,
      avg_accuracy: 0,
      last_session_date: null
    };

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
    const [patientData] = await connection.execute(
      'SELECT * FROM Patients WHERE patient_id = ?',
      [patientId]
    );

    res.json({
      success: true,
      data: {
        summary,
        patient: patientData[0] || null,
        weeklyProgress: [],
        topExercises: []
      }
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
    });
  } finally {
    await connection.end();
  }
});

// ========================
// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// ========================

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
app.get('/test', (req, res) => {
  res.json({
    success: true,
    message: 'API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
    timestamp: new Date().toISOString(),
    endpoints: {
      auth: '/api/auth/*',
      users: '/api/users/*',
      patients: '/api/patients/*',
      reports: '/api/reports/*'
    }
  });
});

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
app.get('/test-db', async (req, res) => {
  const connection = await createConnection();
  
  try {
    const [result] = await connection.execute('SELECT 1 as test');
    res.json({
      success: true,
      message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: result[0]
    });
  } catch (error) {
    console.error('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
app.get('/api/stats/registration', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }
  const connection = await createConnection();
  
  try {
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    const [roleStats] = await connection.execute(`
      SELECT 
        role,
        COUNT(*) as count
      FROM Users 
      GROUP BY role
      ORDER BY count DESC
    `);

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    const [monthlyStats] = await connection.execute(`
      SELECT 
        DATE_FORMAT(created_at, '%Y-%m') as month,
        COUNT(*) as registrations
      FROM Users 
      WHERE created_at >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
      GROUP BY DATE_FORMAT(created_at, '%Y-%m')
      ORDER BY month DESC
    `);

    res.json({
      success: true,
      data: {
        roleStats,
        monthlyStats,
        totalUsers: roleStats.reduce((sum, stat) => sum + stat.count, 0)
      }
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/exercises', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  
  try {
    const [exercises] = await connection.execute(`
      SELECT exercise_id, name_th, name_en, description, angle_range, 
             hold_time, repetitions, sets, rest_time
      FROM Exercises 
      ORDER BY exercise_id
    `);

    res.json({
      success: true,
      data: exercises
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏∂‡∏Å‡∏´‡∏±‡∏î:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏∂‡∏Å‡∏´‡∏±‡∏î'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
async function evaluateExercisePerformance(connection, exerciseId, actualReps, holdTime) {
    const [criteria] = await connection.execute(
        'SELECT * FROM Exercise_Criteria WHERE exercise_id = ?',
        [exerciseId]
    );
    
    if (criteria.length === 0) {
        return { level: 'unknown', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' };
    }
    
    const standard = criteria[0];
    let level = 'needs_improvement';
    let message = '‡∏Ñ‡∏ß‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ';
    
    if (actualReps >= standard.min_reps_excellent) {
        level = 'excellent';
        message = '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢';
    } else if (actualReps >= standard.min_reps_good) {
        level = 'good';
        message = '‡∏î‡∏µ! ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
    }
    
    return {
        level,
        message,
        actual_reps: actualReps,
        target_good: standard.min_reps_good,
        target_excellent: standard.min_reps_excellent,
        hold_time_met: holdTime >= standard.min_hold_time
    };
}

app.post('/api/exercise-sessions', authenticateToken, async (req, res) => {
    const connection = await createConnection();

    try {
        const {
            exercise_type,
            exercise_name,
            actual_reps_left,
            actual_reps_right,
            accuracy_percent,
            duration_seconds,
            notes
        } = req.body;

        const total_reps = (parseInt(actual_reps_left) || 0) + (parseInt(actual_reps_right) || 0);

        // ‡∏´‡∏≤ patient_id
        const [patients] = await connection.execute(
            'SELECT patient_id FROM Patients WHERE user_id = ?',
            [req.user.user_id]
        );

        if (patients.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢' 
            });
        }
        const patientId = patients[0].patient_id;

        // ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á Exercise
        let exerciseId = null;
        const [existingExercises] = await connection.execute(
            'SELECT exercise_id FROM Exercises WHERE name_en = ?',
            [exercise_type]
        );

        if (existingExercises.length > 0) {
            exerciseId = existingExercises[0].exercise_id;
        } else {
            const [exerciseResult] = await connection.execute(
                `INSERT INTO Exercises (name_th, name_en, description) VALUES (?, ?, ?)`,
                [exercise_name, exercise_type, `‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢: ${exercise_name}`]
            );
            exerciseId = exerciseResult.insertId;
        }

        // ‡∏´‡∏≤ plan_id
        const [physios] = await connection.execute(
            'SELECT physio_id FROM Physiotherapists LIMIT 1'
        );
        
        if (physios.length === 0) {
            return res.status(500).json({ 
                success: false, 
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î' 
            });
        }

        let planId = null;
        const [existingPlans] = await connection.execute(
            `SELECT plan_id FROM ExercisePlans 
             WHERE patient_id = ? AND (end_date IS NULL OR end_date >= CURDATE())
             LIMIT 1`,
            [patientId]
        );

        if (existingPlans.length > 0) {
            planId = existingPlans[0].plan_id;
        } else {
            const [planResult] = await connection.execute(
                `INSERT INTO ExercisePlans 
                 (patient_id, physio_id, plan_name, start_date, end_date) 
                 VALUES (?, ?, ?, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 30 DAY))`,
                [patientId, physios[0].physio_id, '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥']
            );
            planId = planResult.insertId;
        }

          // ‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Session ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const [sessionResult] = await connection.execute(
            `INSERT INTO Exercise_Sessions 
            (patient_id, plan_id, exercise_id, session_date, 
              actual_reps, actual_reps_left, actual_reps_right,
              actual_sets, accuracy_percent, duration_seconds, notes) 
            VALUES (?, ?, ?, NOW(), ?, ?, ?, 1, ?, ?, ?)`,
            [
                patientId,
                planId,
                exerciseId,
                total_reps,
                parseInt(actual_reps_left) || 0,
                parseInt(actual_reps_right) || 0,
                parseFloat(accuracy_percent) || 0,
                parseInt(duration_seconds) || 0,
                notes || ''
            ]
        );

        console.log('‚úÖ Session saved:', {
            session_id: sessionResult.insertId,
            left: actual_reps_left,
            right: actual_reps_right,
            total: total_reps
        });

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const [checkTime] = await connection.execute(
            `SELECT 
                session_date,
                CONVERT_TZ(session_date, @@session.time_zone, '+07:00') as thai_time,
                @@session.time_zone as current_tz
            FROM Exercise_Sessions 
            WHERE session_id = ?`,
            [sessionResult.insertId]
        );

        console.log('‚è∞ Time check:', {
            session_id: sessionResult.insertId,
            saved_time: checkTime[0]?.session_date,
            thai_time: checkTime[0]?.thai_time,
            timezone: checkTime[0]?.current_tz,
            server_time: new Date().toISOString(),
            bangkok_time: new Date().toLocaleString('en-US', { timeZone: 'Asia/Bangkok' })
        });

        await connection.end();

        res.status(201).json({
            success: true,
            message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: {
                session_id: sessionResult.insertId,
                actual_reps_left: parseInt(actual_reps_left) || 0,
                actual_reps_right: parseInt(actual_reps_right) || 0,
                total: total_reps,
                accuracy_percent: parseFloat(accuracy_percent) || 0,
                duration_seconds: parseInt(duration_seconds) || 0,
                saved_time: checkTime[0]?.saved_time,
                thai_time: checkTime[0]?.thai_time
            }
        });

    } catch (error) {
        console.error('‚ùå Error:', error);
        if (connection) await connection.end();
        res.status(500).json({ 
            success: false, 
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            error: error.message 
        });
    }
});

// ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ patientId (‡πÉ‡∏ä‡πâ user_id ‡∏à‡∏≤‡∏Å token)
app.get('/api/exercise-sessions', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  
  try {
    const [patients] = await connection.execute(
      'SELECT patient_id FROM Patients WHERE user_id = ?',
      [req.user.user_id]
    );
    
    if (patients.length === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢' });
    }
    
    const patientId = patients[0].patient_id;

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° timezone ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    // ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
    const [sessions] = await connection.execute(`
      SELECT 
          es.session_id,
          es.patient_id,
          es.exercise_id,
          es.plan_id,
          es.session_date  -- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á CONVERT ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      FROM Exercise_Sessions es
      JOIN Exercises e ON es.exercise_id = e.exercise_id
      JOIN ExercisePlans ep ON es.plan_id = ep.plan_id
      WHERE es.patient_id = ?
      ORDER BY es.session_date DESC
      LIMIT 50
    `, [patientId]);

    console.log('‚úÖ Loaded sessions:', {
      count: sessions.length,
      sample: sessions[0] ? {
        left: sessions[0].actual_reps_left,
        right: sessions[0].actual_reps_right,
        total: sessions[0].actual_reps,
        date: sessions[0].session_date
      } : null
    });

    res.json({
      success: true,
      data: sessions,
      total: sessions.length
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ patientId
app.get('/api/exercise-stats', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  
  try {
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å user_id
    const [patients] = await connection.execute(
      'SELECT patient_id FROM Patients WHERE user_id = ?',
      [req.user.user_id]
    );
    
    if (patients.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'
      });
    }
    
    const patientId = patients[0].patient_id;

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    const [totalStats] = await connection.execute(`
      SELECT 
        COUNT(*) as total_sessions,
        AVG(accuracy_percent) as avg_accuracy,
        SUM(actual_reps) as total_reps,
        MAX(accuracy_percent) as best_accuracy,
        MIN(session_date) as first_session,
        MAX(session_date) as last_session
      FROM Exercise_Sessions 
      WHERE patient_id = ?
    `, [patientId]);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [weeklyStats] = await connection.execute(`
      SELECT 
        DATE(session_date) as session_date,
        COUNT(*) as sessions_count,
        AVG(accuracy_percent) as avg_accuracy,
        SUM(actual_reps) as total_reps
      FROM Exercise_Sessions 
      WHERE patient_id = ? AND session_date >= DATE_SUB(NOW(), INTERVAL 7 DAY)
      GROUP BY DATE(session_date)
      ORDER BY session_date DESC
    `, [patientId]);

    // ‡πÅ‡∏ö‡∏ö‡∏Å‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
    const [popularExercises] = await connection.execute(`
      SELECT 
        e.name_th,
        e.name_en,
        COUNT(*) as session_count,
        AVG(es.accuracy_percent) as avg_accuracy
      FROM Exercise_Sessions es
      JOIN Exercises e ON es.exercise_id = e.exercise_id
      WHERE es.patient_id = ?
      GROUP BY es.exercise_id, e.name_th, e.name_en
      ORDER BY session_count DESC
      LIMIT 5
    `, [patientId]);

    res.json({
      success: true,
      data: {
        total_stats: totalStats[0],
        weekly_progress: weeklyStats,
        popular_exercises: popularExercises
      }
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
app.get('/api/exercise-stats/:patientId', authenticateToken, async (req, res) => {
  const connection = await createConnection();
  
  try {
    const patientId = req.params.patientId;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.role === 'Patient' || req.user.role === '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢') {
      const [patientCheck] = await connection.execute(
        'SELECT patient_id FROM Patients WHERE patient_id = ? AND user_id = ?',
        [patientId, req.user.user_id]
      );
      
      if (patientCheck.length === 0) {
        return res.status(403).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ'
        });
      }
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    const [totalStats] = await connection.execute(`
      SELECT 
        COUNT(*) as total_sessions,
        AVG(accuracy_percent) as avg_accuracy,
        SUM(actual_reps) as total_reps,
        MAX(accuracy_percent) as best_accuracy,
        MIN(session_date) as first_session,
        MAX(session_date) as last_session
      FROM Exercise_Sessions 
      WHERE patient_id = ?
    `, [patientId]);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [weeklyStats] = await connection.execute(`
      SELECT 
        DATE(session_date) as session_date,
        COUNT(*) as sessions_count,
        AVG(accuracy_percent) as avg_accuracy,
        SUM(actual_reps) as total_reps
      FROM Exercise_Sessions 
      WHERE patient_id = ? AND session_date >= DATE_SUB(NOW(), INTERVAL 7 DAY)
      GROUP BY DATE(session_date)
      ORDER BY session_date DESC
    `, [patientId]);

    // ‡πÅ‡∏ö‡∏ö‡∏Å‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
    const [popularExercises] = await connection.execute(`
      SELECT 
        e.name_th,
        e.name_en,
        COUNT(*) as session_count,
        AVG(es.accuracy_percent) as avg_accuracy
      FROM Exercise_Sessions es
      JOIN Exercises e ON es.exercise_id = e.exercise_id
      WHERE es.patient_id = ?
      GROUP BY es.exercise_id, e.name_th, e.name_en
      ORDER BY session_count DESC
      LIMIT 5
    `, [patientId]);

    res.json({
      success: true,
      data: {
        total_stats: totalStats[0],
        weekly_progress: weeklyStats,
        popular_exercises: popularExercises
      }
    });

  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢'
    });
  } finally {
    await connection.end();
  }
});
// ========================
// ADMIN DASHBOARD APIs
// ========================

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Dashboard
app.get('/api/admin/dashboard/stats', authenticateToken, async (req, res) => {
  console.log('üìä Dashboard stats request from:', {
    user_id: req.user.user_id,
    role: req.user.role
  });

  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ 
      success: false, 
      message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó Admin',
      current_role: req.user.role
    });
  }

  const connection = await createConnection();
  
  try {
    // ‡∏ô‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [totalUsers] = await connection.execute(
      'SELECT COUNT(*) as count FROM Users'
    );

    // ‡∏ô‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà (30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const [newPatients] = await connection.execute(
      `SELECT COUNT(*) as count FROM Users 
       WHERE role = 'Patient' AND created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)`
    );

    // ‡∏ô‡∏±‡∏ö sessions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [totalSessions] = await connection.execute(
      'SELECT COUNT(*) as count FROM Exercise_Sessions'
    );

    console.log('‚úÖ Dashboard stats loaded:', {
      totalUsers: totalUsers[0].count,
      newPatients: newPatients[0].count,
      totalSessions: totalSessions[0].count
    });

    res.json({
      success: true,
      data: {
        totalUsers: totalUsers[0].count,
        newPatients: newPatients[0].count,
        totalSessions: totalSessions[0].count
      }
    });

  } catch (error) {
    console.error('‚ùå Error loading dashboard stats:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
      error: error.message
    });
  } finally {
    await connection.end();
  }
});


// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
app.get('/api/admin/users', authenticateToken, async (req, res) => {
  console.log('üë• Users list request from:', {
    user_id: req.user.user_id,
    role: req.user.role
  });

  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ 
      success: false, 
      message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á',
      current_role: req.user.role
    });
  }

  const connection = await createConnection();
  
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;

    const [users] = await connection.execute(`
      SELECT user_id, phone, full_name, role, created_at, updated_at 
      FROM Users 
      ORDER BY created_at DESC
      LIMIT ? OFFSET ?
    `, [limit, offset]);

    const [totalCount] = await connection.execute(
      'SELECT COUNT(*) as total FROM Users'
    );

    console.log('‚úÖ Users loaded:', {
      count: users.length,
      total: totalCount[0].total
    });

    res.json({
      success: true,
      data: users,
      pagination: {
        page,
        limit,
        total: totalCount[0].total,
        totalPages: Math.ceil(totalCount[0].total / limit)
      }
    });

  } catch (error) {
    console.error('‚ùå Error loading users:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      error: error.message
    });
  } finally {
    await connection.end();
  }
});

// ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (Admin)
app.get('/api/admin/users/:id', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }
  const connection = await createConnection();
  const userId = parseInt(req.params.id);
  
  try {
    const [users] = await connection.execute(
      'SELECT user_id, phone, full_name, role, created_at FROM Users WHERE user_id = ?',
      [userId]
    );

    if (users.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    res.json({
      success: true,
      data: users[0]
    });

  } catch (error) {
    console.error('Error loading user:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (Admin)
app.post('/api/admin/users', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }

  const connection = await createConnection();
  
  try {
    const { phone, password, full_name, role } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!phone || !password || !full_name || !role) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      });
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const password_hash = await bcrypt.hash(password, 12);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const [result] = await connection.execute(
      'INSERT INTO Users (phone, password_hash, full_name, role, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW())',
      [phone, password_hash, full_name, role]
    );

    res.status(201).json({
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        user_id: result.insertId,
        phone,
        full_name,
        role
      }
    });

  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
    });
  } finally {
    await connection.end();
  }
});

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Admin)
app.put('/api/admin/users/:id', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }

  const connection = await createConnection();
  const userId = parseInt(req.params.id);
  
  try {
    const { phone, full_name, role } = req.body;

    const updates = [];
    const values = [];

    if (phone) {
      updates.push('phone = ?');
      values.push(phone);
    }
    if (full_name) {
      updates.push('full_name = ?');
      values.push(full_name);
    }
    if (role) {
      updates.push('role = ?');
      values.push(role);
    }

    if (updates.length === 0) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'
      });
    }

    updates.push('updated_at = NOW()');
    values.push(userId);

    await connection.execute(
      `UPDATE Users SET ${updates.join(', ')} WHERE user_id = ?`,
      values
    );

    res.json({
      success: true,
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    });
  } finally {
    await connection.end();
  }
});

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Admin)
app.delete('/api/admin/users/:id', authenticateToken, async (req, res) => {
  if (!isAdmin(req.user.role)) {
    return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
  }

  const connection = await createConnection();
  const userId = parseInt(req.params.id);
  
  try {
    await connection.execute(
      'DELETE FROM Users WHERE user_id = ?',
      [userId]
    );

    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
    });
  } finally {
    await connection.end();
  }
});
// ========================
// DEBUG ENDPOINTS (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à)
// ========================

// Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/debug/admins', async (req, res) => {
  const connection = await createConnection();
  
  try {
    const [admins] = await connection.execute(
      'SELECT user_id, phone, full_name, role, created_at FROM Users WHERE role = ?',
      ['Admin']
    );

    res.json({
      success: true,
      count: admins.length,
      admins: admins.map(admin => ({
        user_id: admin.user_id,
        phone: admin.phone,
        full_name: admin.full_name,
        role: admin.role,
        created_at: admin.created_at
      }))
    });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  } finally {
    await connection.end();
  }
});

// Debug: ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
app.post('/api/debug/create-admin', async (req, res) => {
  const connection = await createConnection();
  
  try {
    const phone = '0800000000';
    const password = 'admin123';
    const full_name = 'Admin Test';
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existing] = await connection.execute(
      'SELECT user_id FROM Users WHERE phone = ?',
      [phone]
    );
    
    if (existing.length > 0) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Admin ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const password_hash = await bcrypt.hash(password, 12);
      await connection.execute(
        'UPDATE Users SET password_hash = ?, updated_at = NOW() WHERE phone = ?',
        [password_hash, phone]
      );
      
      return res.json({
        success: true,
        message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        credentials: {
          phone: phone,
          password: password,
          user_id: existing[0].user_id
        }
      });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const password_hash = await bcrypt.hash(password, 12);
    
    const [result] = await connection.execute(
      'INSERT INTO Users (phone, password_hash, full_name, role, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW())',
      [phone, password_hash, full_name, 'Admin']
    );

    res.json({
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      credentials: {
        phone: phone,
        password: password,
        user_id: result.insertId
      }
    });

  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  } finally {
    await connection.end();
  }
});

// Debug: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Token
app.get('/api/debug/me', authenticateToken, (req, res) => {
  res.json({
    success: true,
    user: {
      user_id: req.user.user_id,
      phone: req.user.phone,
      role: req.user.role,
      user_id_type: typeof req.user.user_id
    }
  });
});

// Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
app.post('/api/debug/check-password', async (req, res) => {
  const connection = await createConnection();
  
  try {
    const { phone, password } = req.body;
    
    const [users] = await connection.execute(
      'SELECT user_id, phone, password_hash, role FROM Users WHERE phone = ?',
      [phone]
    );

    if (users.length === 0) {
      return res.json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      });
    }

    const user = users[0];
    const isValid = await bcrypt.compare(password, user.password_hash);

    res.json({
      success: true,
      phone: user.phone,
      role: user.role,
      password_match: isValid,
      hash_preview: user.password_hash.substring(0, 20) + '...'
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  } finally {
    await connection.end();
  }
});
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 404 - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ PathError
app.use((req, res, next) => {
  res.status(404).json({
    success: false,
    message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏',
    path: req.originalUrl,
    method: req.method
  });
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
app.use((error, req, res, next) => {
  console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:', error);
  
  // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô production
  const isDevelopment = process.env.NODE_ENV === 'development';
  
  res.status(500).json({
    success: false,
    message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
    ...(isDevelopment && { error: error.message, stack: error.stack })
  });
});

app.listen(port, '0.0.0.0', () => { // ‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    console.log(`Server running on port ${port}`);
});